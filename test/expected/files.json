[
	"---\nlayout: post\nlang: en\ntitle: 'Loading framework’s plugins with RequireJS'\ndate: Mar 27, 2015\ntags:\n  - javascript\n---\n\nIn big project, you often use framework extensions or plugins: things that extend your framework’s namespace but do not export any modules themselves. For example I use Backbone and React with [Backbone.localStorage](https://github.com/jeromegn/Backbone.localStorage), [react.backbone](https://github.com/clayallsopp/react.backbone) and [my own React mixins](https://github.com/sapegin/kurush/blob/6f3ac4a38bada39a59cce0fce33d97f8b12c812c/web/app/util/react-extras.js).\n\nI’m trying to find the best way to include such modules with RequireJS. Most of them can be used for polyfills too.\n\n## Almighty copypasta\n\nJust require everything in all modules.\n\n```js\n// mymodule.js\ndefine(['backbone', 'react', 'backboneLocalStorage', 'reactBackbone', 'util/react-extras'], function(Backbone, React) {\n    …\n});\n```\n\nPros:\n\n* None.\n\nCons:\n\n* Code repetition.\n* Very hard to maintain.\n\n## Main module\n\nRequire everything in the main module.\n\n```js\n// main.js\nrequire(['router', 'backbone', 'backboneLocalStorage', 'reactBackbone', 'util/react-extras'], function(Router, Backbone) {\n    …\n});\n```\n\nPros:\n\n* Clean modules.\n* All extensions in (almost) one place.\n\nCons:\n\n* Difficult to test (tests don’t include main.js), so you need to require these modules for tests differently.\n\n## Bootstrap module\n\nPut all the extensions in a separate module and require it from your main module and from tests.\n\n```js\n// main.js\nrequire(['bootstrap', 'router', 'backbone'], function(_, Router, Backbone) {\n    …\n});\n\n// bootstrap.js\ndefine([\n    'backbone',\n    'react',\n    'backboneLocalStorage',\n    'reactBackbone',\n    'util/react-extras'\n]);\n```\n\nPros:\n\n* All extensions in one place.\n* Clean modules.\n\nCons:\n\n* You need to require bootstrap from your main module and from every test.\n\n## RequireJS bundles\n\nBundle is a special module, which you create with [the RequieJS optimizer](http://requirejs.org/docs/optimization.html). Any time you require one of the modules inside the bundle RequireJS will load the bundle instead.\n\n```js\n// config.js\nrequire.config({\n    bundles: {\n        'backbone-bundle': ['backbone', 'backboneLocalStorage'],\n        'react-bundle': ['react', 'reactBackbone', 'util/react-extras']\n    }\n    …\n});\n```\n\n(I haven’t try this method myself because I think it’s overcomplicated but here’s a [good article](http://webroo.org/articles/2014-03-30/using-the-new-require-js-bundles-feature/) on how to make and use bundles.)\n\nPros:\n\n* Clean modules.\n* No need to do anything special for tests.\n\nCons:\n\n* You need to create and maintain bundles.\n\n## Wrappers\n\nCreate a separate module that requires an original framework with all needed extensions and returns framework back. Do it for all your frameworks that you want to extend.\n\n```js\n// config.js\nrequire.config({\n    paths: {\n        // Rename original framework\n        reactOriginal: 'bower_components/react…',\n        // require('react') will load our wrapper module\n        react: 'react-with-extras'\n    }\n    …\n});\n\n// react-with-extras.js\ndefine(['reactOriginal', 'util/react-extras'], function(React) {\n    return React;\n});\n```\n\nPros:\n\n* Clean modules.\n* No need to do anything special for tests.\n\nCons:\n\n* A bit complicated.\n\n## Conclusion\n\nI don’t like any of these techniques very much and I hope I’ve just missed the best one. Tell me if you know it.\n",
	"---\nlayout: post\nlang: en\ntitle: 'Read less tech books'\ndate: Feb 20, 2014\ntags:\n  - thoughts\n---\n\nVladimir Starkov [suggests](http://vstarkov.com/monthbook/) to read at least two technical books a month.\n\nIt’s very important to be up-to-date with latest trends, especially in so fast changing industry as front-end development. But there are so many interesting subjects besides  programming languages and new frameworks.\n\nI love to [read](http://bibla.ru/sapegin/read/) about design, typography, photography (more about philosophy than technique), languages, writing, people and other subjects.\n\nReading for me isn’t merely source of a new information but by and large it’s a pleasure of a good language. People who write about tech stuff usually aren’t the best writers and their books often are just boring.\n\nUnfortunately I don’t always follow my very own advice: most of the books I read are tech books. And I read fiction not as often as I should.\n\nP. S. And of course don’t forget to go outside with a good non-tech book.\n",
	"---\nlayout: post\nlang: ru\ntitle: Условная компиляция (отладочная версия) JavaScript и Stylus с помощью Grunt\ndate: \"Mar 6, 2013\"\ndisqus_identifier: \"debug-mode\"\ntags: \n  - javascript\n  - stylus\n  - html\n  - tools\n\n---\n\nПочти в любом проекте есть какой-то код, который используется только для отладки, и было бы удобно, если бы такой код автоматически удалялся при публикации.\n\nОтладочный режим будет включаться при запуске [Гранта](http://nano.sapegin.ru/all/grunt-0-4) с параметром `--debug`. Определить его из грантфайла можно так:\n\n```javascript\nvar debug = !!grunt.option('debug');\n```\n\nЭта переменная нам скоро понадобится.\n\n## JavaScript\n\nВ Углифае есть возможность задавать глобальные переменные — что-то вроде препроцессора: переменная в коде заменяется значением, а образовавшийся мёртвый код (`if (false) { /* Например, такой */ }`) удаляется. \n\nПеременные можно задавать из [командной строки](https://github.com/mishoo/UglifyJS#usage) или через грантфайл:\n\n```javascript\nuglify: {\n\toptions: {\n\t\tcompress: {\n\t\t\tglobal_defs: {\n\t\t\t\tDEBUG: debug  // Та самая переменная\n\t\t\t}\n\t\t}\n\t},\n\tmain: {\n\t\tfiles: {\n\t\t\t\"build/scripts.js\": \"build/scripts.js\"\n\t\t}\n\t}\n}\n```\n\nПример использования переменной в Яваскрипте:\n\n```javascript\n/*global DEBUG:true*/\n// Отладочный режим по умолчанию (можно сделать и наоборот)\nif (typeof DEBUG === 'undefined') DEBUG = true;\n\n;(function() {\n\t'use strict';\n\n\t// …\n\tif (DEBUG) {\n\t\talert('Это сообщение появится только в отладочном режиме');\n\t}\n\t// …\n\n}());\n```\n\n## Stylus\n\nВ Стилусе всё ещё проще. Грантфайл:\n\n```javascript\nstylus: {\n\toptions: {\n\t\tdefine: {\n\t\t\tDEBUG: debug\n\t\t}\n\t},\n\tcompile: {\n\t\tfiles: {\n\t\t\t\"build/styles.css\": \"styles/index.styl\"\n\t\t}\n\t}\n}\n```\n\nИ пример использования:\n\n```css\nDEBUG ?= true\n\ndiv\n\toutline: 1px solid #c0ffee if DEBUG\n```\n"
]
