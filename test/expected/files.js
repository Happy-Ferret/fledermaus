module.exports = [{
	"layout": "post",
	"more": undefined,
	"lang": "en",
	"title": "Loading framework’s plugins with RequireJS",
	"date": "Mar 27, 2015",
	"excerpt": undefined,
	"tags": ["javascript"],
	"sourcePath": "en/plugins-requirejs.md",
	"content": "<p>In big project, you often use framework extensions or plugins: things that extend your framework’s namespace but do not export any modules themselves. For example I use Backbone and React with <a href=\"https://github.com/jeromegn/Backbone.localStorage\">Backbone.localStorage</a>, <a href=\"https://github.com/clayallsopp/react.backbone\">react.backbone</a> and <a href=\"https://github.com/sapegin/kurush/blob/6f3ac4a38bada39a59cce0fce33d97f8b12c812c/web/app/util/react-extras.js\">my own React mixins</a>.</p>\n<p>I’m trying to find the best way to include such modules with RequireJS. Most of them can be used for polyfills too.</p>\n<h2>Almighty copypasta</h2>\n<p>Just require everything in all modules.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// mymodule.js</span>\ndefine([<span class=\"hljs-string\">'backbone'</span>, <span class=\"hljs-string\">'react'</span>, <span class=\"hljs-string\">'backboneLocalStorage'</span>, <span class=\"hljs-string\">'reactBackbone'</span>, <span class=\"hljs-string\">'util/react-extras'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Backbone, React</span>) </span>{\n    …\n});\n</code></pre>\n<p>Pros:</p>\n<ul>\n<li>None.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Code repetition.</li>\n<li>Very hard to maintain.</li>\n</ul>\n<h2>Main module</h2>\n<p>Require everything in the main module.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">'router'</span>, <span class=\"hljs-string\">'backbone'</span>, <span class=\"hljs-string\">'backboneLocalStorage'</span>, <span class=\"hljs-string\">'reactBackbone'</span>, <span class=\"hljs-string\">'util/react-extras'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Router, Backbone</span>) </span>{\n    …\n});\n</code></pre>\n<p>Pros:</p>\n<ul>\n<li>Clean modules.</li>\n<li>All extensions in (almost) one place.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Difficult to test (tests don’t include main.js), so you need to require these modules for tests differently.</li>\n</ul>\n<h2>Bootstrap module</h2>\n<p>Put all the extensions in a separate module and require it from your main module and from tests.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">'bootstrap'</span>, <span class=\"hljs-string\">'router'</span>, <span class=\"hljs-string\">'backbone'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_, Router, Backbone</span>) </span>{\n    …\n});\n\n<span class=\"hljs-comment\">// bootstrap.js</span>\ndefine([\n    <span class=\"hljs-string\">'backbone'</span>,\n    <span class=\"hljs-string\">'react'</span>,\n    <span class=\"hljs-string\">'backboneLocalStorage'</span>,\n    <span class=\"hljs-string\">'reactBackbone'</span>,\n    <span class=\"hljs-string\">'util/react-extras'</span>\n]);\n</code></pre>\n<p>Pros:</p>\n<ul>\n<li>All extensions in one place.</li>\n<li>Clean modules.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>You need to require bootstrap from your main module and from every test.</li>\n</ul>\n<h2>RequireJS bundles</h2>\n<p>Bundle is a special module, which you create with <a href=\"http://requirejs.org/docs/optimization.html\">the RequieJS optimizer</a>. Any time you require one of the modules inside the bundle RequireJS will load the bundle instead.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// config.js</span>\n<span class=\"hljs-built_in\">require</span>.config({\n    bundles: {\n        <span class=\"hljs-string\">'backbone-bundle'</span>: [<span class=\"hljs-string\">'backbone'</span>, <span class=\"hljs-string\">'backboneLocalStorage'</span>],\n        <span class=\"hljs-string\">'react-bundle'</span>: [<span class=\"hljs-string\">'react'</span>, <span class=\"hljs-string\">'reactBackbone'</span>, <span class=\"hljs-string\">'util/react-extras'</span>]\n    }\n    …\n});\n</code></pre>\n<p>(I haven’t try this method myself because I think it’s overcomplicated but here’s a <a href=\"http://webroo.org/articles/2014-03-30/using-the-new-require-js-bundles-feature/\">good article</a> on how to make and use bundles.)</p>\n<p>Pros:</p>\n<ul>\n<li>Clean modules.</li>\n<li>No need to do anything special for tests.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>You need to create and maintain bundles.</li>\n</ul>\n<h2>Wrappers</h2>\n<p>Create a separate module that requires an original framework with all needed extensions and returns framework back. Do it for all your frameworks that you want to extend.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// config.js</span>\n<span class=\"hljs-built_in\">require</span>.config({\n    paths: {\n        <span class=\"hljs-comment\">// Rename original framework</span>\n        reactOriginal: <span class=\"hljs-string\">'bower_components/react…'</span>,\n        <span class=\"hljs-comment\">// require('react') will load our wrapper module</span>\n        react: <span class=\"hljs-string\">'react-with-extras'</span>\n    }\n    …\n});\n\n<span class=\"hljs-comment\">// react-with-extras.js</span>\ndefine([<span class=\"hljs-string\">'reactOriginal'</span>, <span class=\"hljs-string\">'util/react-extras'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">React</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> React;\n});\n</code></pre>\n<p>Pros:</p>\n<ul>\n<li>Clean modules.</li>\n<li>No need to do anything special for tests.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>A bit complicated.</li>\n</ul>\n<h2>Conclusion</h2>\n<p>I don’t like any of these techniques very much and I hope I’ve just missed the best one. Tell me if you know it.</p>\n",
	"url": "/en/plugins-requirejs"
}, {
	"layout": "post",
	"more": undefined,
	"lang": "en",
	"title": "Read less tech books",
	"date": "Feb 20, 2014",
	"excerpt": undefined,
	"tags": ["thoughts"],
	"sourcePath": "en/read-less-tech-books.md",
	"content": "<p>Vladimir Starkov <a href=\"http://vstarkov.com/monthbook/\">suggests</a> to read at least two technical books a month.</p>\n<p>It’s very important to be up-to-date with latest trends, especially in so fast changing industry as front-end development. But there are so many interesting subjects besides  programming languages and new frameworks.</p>\n<p>I love to <a href=\"http://bibla.ru/sapegin/read/\">read</a> about design, typography, photography (more about philosophy than technique), languages, writing, people and other subjects.</p>\n<p>Reading for me isn’t merely source of a new information but by and large it’s a pleasure of a good language. People who write about tech stuff usually aren’t the best writers and their books often are just boring.</p>\n<p>Unfortunately I don’t always follow my very own advice: most of the books I read are tech books. And I read fiction not as often as I should.</p>\n<p>P. S. And of course don’t forget to go outside with a good non-tech book.</p>\n",
	"url": "/en/read-less-tech-books"
}, {
	"layout": "post",
	"more": undefined,
	"lang": "ru",
	"title": "Условная компиляция (отладочная версия) JavaScript и Stylus с помощью Grunt",
	"date": "Mar 6, 2013",
	"excerpt": undefined,
	"disqus_identifier": "debug-mode",
	"tags": ["javascript", "stylus", "html", "tools"],
	"sourcePath": "ru/debug-mode.md",
	"content": "<p>Почти в любом проекте есть какой-то код, который используется только для отладки, и было бы удобно, если бы такой код автоматически удалялся при публикации.</p>\n<p>Отладочный режим будет включаться при запуске <a href=\"http://nano.sapegin.ru/all/grunt-0-4\">Гранта</a> с параметром <code>--debug</code>. Определить его из грантфайла можно так:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> debug = !!grunt.option(<span class=\"hljs-string\">'debug'</span>);\n</code></pre>\n<p>Эта переменная нам скоро понадобится.</p>\n<h2>JavaScript</h2>\n<p>В Углифае есть возможность задавать глобальные переменные — что-то вроде препроцессора: переменная в коде заменяется значением, а образовавшийся мёртвый код (<code>if (false) { /* Например, такой */ }</code>) удаляется. </p>\n<p>Переменные можно задавать из <a href=\"https://github.com/mishoo/UglifyJS#usage\">командной строки</a> или через грантфайл:</p>\n<pre><code class=\"lang-javascript\">uglify: {\n    options: {\n        compress: {\n            global_defs: {\n                DEBUG: debug  <span class=\"hljs-comment\">// Та самая переменная</span>\n            }\n        }\n    },\n    main: {\n        files: {\n            <span class=\"hljs-string\">\"build/scripts.js\"</span>: <span class=\"hljs-string\">\"build/scripts.js\"</span>\n        }\n    }\n}\n</code></pre>\n<p>Пример использования переменной в Яваскрипте:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">/*global DE<span class=\"hljs-doctag\">BUG:</span>true*/</span>\n<span class=\"hljs-comment\">// Отладочный режим по умолчанию (можно сделать и наоборот)</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> DEBUG === <span class=\"hljs-string\">'undefined'</span>) DEBUG = <span class=\"hljs-literal\">true</span>;\n\n;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-meta\">    'use strict'</span>;\n\n    <span class=\"hljs-comment\">// …</span>\n    <span class=\"hljs-keyword\">if</span> (DEBUG) {\n        alert(<span class=\"hljs-string\">'Это сообщение появится только в отладочном режиме'</span>);\n    }\n    <span class=\"hljs-comment\">// …</span>\n\n}());\n</code></pre>\n<h2>Stylus</h2>\n<p>В Стилусе всё ещё проще. Грантфайл:</p>\n<pre><code class=\"lang-javascript\">stylus: {\n    options: {\n        define: {\n            DEBUG: debug\n        }\n    },\n    compile: {\n        files: {\n            <span class=\"hljs-string\">\"build/styles.css\"</span>: <span class=\"hljs-string\">\"styles/index.styl\"</span>\n        }\n    }\n}\n</code></pre>\n<p>И пример использования:</p>\n<pre><code class=\"lang-css\">DEBUG ?= true\n\ndiv\n    outline: 1px solid #c0ffee if DEBUG\n</code></pre>\n",
	"url": "/ru/debug-mode"
}];
